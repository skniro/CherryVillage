plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

version = project.fabric_mod_version
group = project.maven_group

repositories {
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation project(":Common")
    // Fabric API. This is technically optional, but you probably want it anyway.
    //Production environment client test to use
    //include "com.github.glitchfiend:TerraBlender-fabric:${project.terrablender_version}"
    //include "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // compile against the JEI API but do not include it at runtime
    //modCompileOnlyApi("mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}")
    //modCompileOnlyApi("mezz.jei:jei-${project.minecraft_version}-fabric-api:${project.jei_version}")
    // at runtime, use the full JEI jar for Fabric
    //modRuntimeOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}")
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }

}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}


def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.maven_group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (System.getenv("MAVEN_URL")) {
            maven {
                name = 'mavenLocal2'
                url System.getenv("MAVEN_URL")
                // Add repositories to publish to here.
                // Notice: This block does NOT have the same function as the block in the top level.
                // The repositories here will be used for publishing your artifact, not for
                // retrieving dependencies.
            }
        }
    }
}
